@using DTOs.Models
@using HttpClients.ClientInterfaces
@inject NavigationManager NavigationManager
@inject IPostService PostService
@inject ISMUserService userService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="post-item card my-3 custom-card">
    <div class="card-body">
        <!-- Header Section -->
        <div class="d-flex align-items-center mb-3">
            <i class="bi bi-person-circle fs-3 me-2 profile-icon"></i>
            <div>
                <span class="fw-bold">@username</span> <br />
                <small class="text-muted">@Post.PostDate</small>
            </div>
        </div>

        <!-- Title -->
        <h5 class="card-title">@Post.Title</h5>

        <!-- Body -->
        <p class="card-text">@Post.Body</p>

        <!-- Actions Section -->
        <div class="d-flex justify-content-between align-items-center mt-3">
            <div>
                <button class="btn btn-sm @LikeButtonClass" @onclick="() => ToggleLike(Post.PostId)">
                    <i class="@LikeIconClass"></i> @LikeText (@Post.LikeCount)
                </button>
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => ToggleComments(Post.PostId)">
                    <i class="bi bi-chat"></i> Comment (@Post.CommentCount)
                </button>
            </div>

            <div>
                @if (IsCurrentUser(Post.UserId))
                {
                    <button class="btn btn-sm btn-outline-primary" @onclick="() => EditPost(Post.PostId)">
                        <i class="bi bi-pencil-square"></i> Edit
                    </button>
                }
                else
                {
                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ReportPost(Post.PostId)">
                        <i class="bi bi-flag"></i> Report
                    </button>
                }
            </div>
        </div>
    </div>

    <!-- Comments Section -->
    @if (CommentsVisibility.TryGetValue(Post.PostId, out var isVisible) && isVisible)
    {
        <div class="comments-section border-top mt-3 pt-3">
            <CommentComponent PostId="Post.PostId" />
        </div>
    }
</div>

@code {
    [Parameter] public Post Post { get; set; }
    public int CurrentUserId { get; set; }
    private string username;

    private Dictionary<int, bool> CommentsVisibility = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadUsername();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.Claims.FirstOrDefault(c => c.Type == "Id")?.Value;
            CurrentUserId = int.Parse(userId);

            await FetchLikedPosts();
        }

        await LoadUsername();
    }

    private async Task FetchLikedPosts()
    {
        try
        {
            var likedPosts = await PostService.GetLikedPosts(CurrentUserId);
            
            Post.UserLiked = likedPosts.Any(p => p.PostId == Post.PostId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task LoadUsername()
    {
        try
        {
            username = await GetUsernameById(Post.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting username: {ex.Message}");
            username = "Unknown User";
        }
    }

    private bool IsCurrentUser(int userId)
    {
        return CurrentUserId == userId;
    }

    private string LikeText => Post.UserLiked ? "Unlike" : "Like";
    private string LikeIconClass => Post.UserLiked ? "bi bi-hand-thumbs-up-fill" : "bi bi-hand-thumbs-up";
    private string LikeButtonClass => Post.UserLiked ? "btn-primary" : "btn-outline-primary";

    private async Task ToggleLike(int postId)
    {
        if (Post.UserLiked)
        {
            await UnlikePost(postId);
        }
        else
        {
            await LikePost(postId);
        }
    }

    private async Task LikePost(int postId)
    {
        try
        {
            await PostService.LikePost(CurrentUserId, postId);
            Post.UserLiked = true;
            Post.LikeCount++;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw new Exception($"Error liking post: {ex.Message}");
        }
    }

    private async Task UnlikePost(int postId)
    {
        try
        {
            await PostService.UnlikePost(CurrentUserId, postId);
            Post.UserLiked = false;
            Post.LikeCount--;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw new Exception($"Error unliking post: {ex.Message}");
        }
    }

    private void EditPost(int postId)
    {
        NavigationManager.NavigateTo($"/edit-post/{postId}");
    }

    private void ReportPost(int postId)
    {
        // Handle report post logic (e.g., show a confirmation modal or call a service)
        Console.WriteLine($"Post {postId} reported by user {CurrentUserId}");
    }

    private void ToggleComments(int postId)
    {
        if (CommentsVisibility.ContainsKey(postId))
        {
            CommentsVisibility[postId] = !CommentsVisibility[postId];
        }
        else
        {
            CommentsVisibility[postId] = true;
        }
    }

    private async Task<string> GetUsernameById(int userId)
    {
        try
        {
            var user = await userService.GetByUserId(userId);
            return user.Nickname;
        }
        catch (Exception ex)
        {
            throw new Exception("Error getting user by id", ex);
        }
    }
}