@using DTOs.DTOs.Comment
@using DTOs.Models
@using DTOs.User
@using DTOs.User.PostDTOs
@using HttpClients.ClientInterfaces
@inject NavigationManager NavigationManager
@inject IPostService PostService
@inject ISMUserService userService
@inject ICategoryService categoryService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICommentService CommentService

<div class="post-item card my-3 custom-card">
    <div class="card-body">
        <!-- Header Section -->
        <div class="d-flex align-items-center mb-3">
            <i class="bi bi-person-circle fs-3 me-2 profile-icon"></i>
            <div>
                <span class="fw-bold username-link" @onclick="() => NavigateToUserProfile(username)">@nickname</span> <br />
                <small class="text-muted">@Post.PostDate</small>
            </div>
        </div>

        <!-- Title -->
        @if (isEditMode)
        {
            <h6 class="card-title">Title</h6>
            <input type="text" class="form-control" placeholder="@Post.Title" @bind="editedTitle" />
            @if (string.IsNullOrWhiteSpace(editedTitle))
            {
                <small class="text-danger">Title cannot be empty.</small>
            }
        }
        else
        {
            <h5 class="card-title">@Post.Title</h5>
        }

        <!-- Body -->
        @if (isEditMode)
        {
            <h6 class="card-title">Body</h6>
            <textarea class="form-control" placeholder="@Post.Body" @bind="editedBody"></textarea>
            @if (string.IsNullOrWhiteSpace(editedBody))
            {
                <small class="text-danger">Body cannot be empty.</small>
            }
        }
        else
        {
            <p class="card-text">@Post.Body</p>
        }

        <!-- Category -->
        @if (isEditMode)
        {
            <h6 class="card-title">Category</h6>
            <InputSelect @bind-Value="categoryId">
                <option value="@Post.CategoryId">@categoryName</option>
                @foreach (var category in categories.Where(c => c.Id != Post.CategoryId))
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
            @if (categoryId == 0)
            {
                <small class="text-danger">Please select a valid category.</small>
            }
        }

        <!-- Actions Section -->
        <div class="d-flex justify-content-between align-items-center mt-3">
            <div>
                <button class="btn btn-sm @LikeButtonClass" @onclick="() => ToggleLike(Post.PostId)">
                    <i class="@LikeIconClass"></i> @LikeText (@Post.LikeCount)
                </button>
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => ToggleComments(Post.PostId)">
                    <i class="bi bi-chat"></i> Comment (@Post.CommentCount)
                </button>
            </div>

            <div>
                @if (IsCurrentUser(Post.UserId))
                {
                    @if (isEditMode)
                    {
                        <button class="btn btn-sm btn-outline-primary" @onclick="SavePost">
                            <i class="bi bi-save"></i> Save
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="CancelEdit">
                            <i class="bi bi-x"></i> Cancel
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-outline-primary" @onclick="EditPost">
                            <i class="bi bi-pencil-square"></i> Edit
                        </button>
                        <button class="btn btn-sm btn-outline-primary" @onclick="DeletePost">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    }
                }
                else
                {
                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ReportPost(Post.PostId)">
                        <i class="bi bi-flag"></i> Report
                    </button>
                }
            </div>
        </div>
    </div>

    <!-- Comments Section -->
    @if (CommentsVisibility.TryGetValue(Post.PostId, out var isVisible) && isVisible)
    {
        <div class="comments-section border-top mt-3 pt-3">
            <CommentComponent @ref="commentComponentRef" PostId="Post.PostId" />
            <div class="input-group mt-3">
                <textarea class="form-control custom-textarea" placeholder="Write a comment..." @bind="commentBody"></textarea>
                <button class="send-btn" @onclick="SubmitComment">
                    <i class="bi bi-send"></i>
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Post Post { get; set; }
    public int CurrentUserId { get; set; }
    private string nickname;
    private string username;
    private string commentBody;
    private int categoryId;

    private List<Category> categories = new List<Category>();
    private string categoryName;
    
    private CommentComponent commentComponentRef;
    private PostComponent postComponentRef;
    private Dictionary<int, bool> CommentsVisibility = new();

    private bool isEditMode = false;
    private string editedTitle;
    private string editedBody;
    private string editedCategoryId;

    protected override async Task OnParametersSetAsync()
    {
        await LoadNicknameAndUsername();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.Claims.FirstOrDefault(c => c.Type == "Id")?.Value;
            CurrentUserId = int.Parse(userId);

            await FetchLikedPosts();
        }

        await LoadNicknameAndUsername();
        await GetCategories();
    }

    private async Task FetchLikedPosts()
    {
        try
        {
            var likedPosts = await PostService.GetLikedPosts(CurrentUserId);
            Post.UserLiked = likedPosts.Any(p => p.PostId == Post.PostId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task LoadNicknameAndUsername()
    {
        try
        {
            var user = await userService.GetByUserId(Post.UserId);
            nickname = user.Nickname;
            username = user.Username;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting user data: {ex.Message}");
            nickname = "Unknown User";
            username = "Unknown User";
        }
    }

    private bool IsCurrentUser(int userId)
    {
        return CurrentUserId == userId;
    }

    private string LikeText => Post.UserLiked ? "Unlike" : "Like";
    private string LikeIconClass => Post.UserLiked ? "bi bi-hand-thumbs-up-fill" : "bi bi-hand-thumbs-up";
    private string LikeButtonClass => Post.UserLiked ? "btn-primary" : "btn-outline-primary";

    private async Task GetCategories()
    {
        categories = await categoryService.GetAllCategories();
    }
    
    private async Task ToggleLike(int postId)
    {
        if (Post.UserLiked)
        {
            await UnlikePost(postId);
        }
        else
        {
            await LikePost(postId);
        }
    }

    private async Task LikePost(int postId)
    {
        try
        {
            await PostService.LikePost(CurrentUserId, postId);
            Post.UserLiked = true;
            Post.LikeCount++;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw new Exception($"Error liking post: {ex.Message}");
        }
    }

    private async Task UnlikePost(int postId)
    {
        try
        {
            await PostService.UnlikePost(CurrentUserId, postId);
            Post.UserLiked = false;
            Post.LikeCount--;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw new Exception($"Error unliking post: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        isEditMode = false;
    }

    private void ReportPost(int postId)
    {
        // Handle report post logic (e.g., show a confirmation modal or call a service)
        Console.WriteLine($"Post {postId} reported by user {CurrentUserId}");
    }

    private void ToggleComments(int postId)
    {
        if (CommentsVisibility.ContainsKey(postId))
        {
            CommentsVisibility[postId] = !CommentsVisibility[postId];
        }
        else
        {
            CommentsVisibility[postId] = true;
        }
    }

    private void NavigateToUserProfile(string username)
    {
        NavigationManager.NavigateTo($"/Profiles/{username}");
    }

    private async Task SubmitComment()
    {
        CreateCommentDTO createCommentDTO = new CreateCommentDTO(commentBody, CurrentUserId, Post.PostId);
        await CommentService.CreateCommentAsync(createCommentDTO);
        commentBody = string.Empty;
        Post.CommentCount++;
        await commentComponentRef.ReloadCommentsAsync();
        StateHasChanged();
    }
    
    private void EditPost()
    {
        isEditMode = true;
        editedTitle = Post.Title;
        editedBody = Post.Body;
        
        categoryName = categories.FirstOrDefault(c => c.Id == Post.CategoryId)?.Name;
    }

    private async Task SavePost()
    {
        if (categoryId == 0)
        {
            categoryId = Post.CategoryId;
        }

        try
        {
            Post.Title = editedTitle;
            Post.Body = editedBody;
            Post.CategoryId = categoryId;

            await PostService.UpdatePost(new UpdatePostDTO(
                Post.PostId,
                Post.Title,
                Post.Body,
                Post.CategoryId,
                Post.UserId
            ));
            isEditMode = false;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error saving post: {ex.Message}");
        }
    }

    
    private async Task DeletePost()
    {
        try
        {
            await PostService.DeletePost(Post.PostId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw new Exception($"Error deleting post: {ex.Message}");
        }
    }
}