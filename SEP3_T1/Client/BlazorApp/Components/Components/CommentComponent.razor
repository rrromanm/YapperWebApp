@using DTOs.DTOs.Comment
@using DTOs.DTOs.Notification
@using DTOs.Models
@using HttpClients.ClientInterfaces
@inject ICommentService CommentService
@inject ISMUserService SMUserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject INotificationService NotificationService

<div class="comments-container">
    @if (commentsWithUsers != null && commentsWithUsers.Count > 0)
    {
        @foreach (var commentWithUser in commentsWithUsers)
        {
            <div class="comment-item">
                <p>
                    <strong class="username-link" @onclick="() => NavigateToUserProfile(commentWithUser.SmUser.Username)">
                        @commentWithUser.SmUser.Nickname:
                    </strong>
                    @if (commentWithUser.isEditMode)
                    {
                    <textarea class="form-control" @bind="commentWithUser.editedCommentBody"></textarea>
                    }
                    else
                    {
                    @commentWithUser.Comment.body
                    }
                </p>
                <small class="text-muted">@commentWithUser.Comment.commentDate</small>
                <div class="like-section">
                    <button class="like-button" @onclick="() => ToggleLikeComment(commentWithUser.Comment.commentId, commentWithUser.Comment.userLiked)">
                        <i class="@LikeIconClass(commentWithUser.Comment.userLiked)"></i> @LikeText(commentWithUser.Comment.userLiked) (@commentWithUser.Comment.likeCount)
                    </button>
                    <div class="button-container">
                        @if (commentWithUser.Comment.userId == CurrentUserId)
                        {
                        
                            @if (commentWithUser.isEditMode)
                            {
                                <button class="save-button" @onclick="() => SaveEdit(commentWithUser)">
                                    <i class="bi bi-save"></i> Save
                                </button>
                                <button class="cancel-button" @onclick="() => CancelEdit(commentWithUser)">
                                    <i class="bi bi-x"></i> Cancel
                                </button>
                            }
                            else
                            {
                                <button class="edit-button" @onclick="() => EditComment(commentWithUser)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="delete-button" @onclick="() => DeleteComment(commentWithUser.Comment.commentId)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            }
                        }
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>No comments available.</p>
    }
</div>

@code {
    [Parameter] public int PostId { get; set; }
    [Parameter] public EventCallback OnCommentDeleted { get; set; }
    [Parameter] public EventCallback<string> OnCommentError { get; set; }
    [Parameter] public EventCallback OnEditSuccess { get; set; }
    private List<CommentWithUser> commentsWithUsers;
    private int CurrentUserId { get; set; }
    
    private string LikeText(bool userLiked) => userLiked ? "Unlike" : "Like";
    private string LikeIconClass(bool userLiked) => userLiked ? "bi bi-hand-thumbs-up-fill" : "bi bi-hand-thumbs-up";
    private string LikeButtonClass(bool userLiked) => userLiked ? "btn-primary" : "btn-outline-primary";

    protected override async Task OnParametersSetAsync()
    {
        await LoadCommentsAndUsers();
        await FetchLikedComments();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.Claims.FirstOrDefault(c => c.Type == "Id")?.Value;
            CurrentUserId = int.Parse(userId);
            await LoadCommentsAndUsers();
            await FetchLikedComments();
        }
    }

    private async Task LoadCommentsAndUsers()
    {
        try
        {

            var comments = await CommentService.GetCommentsByPostIdAsync(PostId);


            var tasks = comments.Select(async comment => new CommentWithUser
            {
                Comment = comment,
                SmUser = await SMUserService.GetByUserId(comment.userId)
            });

            commentsWithUsers = (await Task.WhenAll(tasks)).ToList();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading comments for PostId {PostId}: {ex.Message}");
        }
    }

    private async Task LikeComment(int commentId)
    {
        try
        {
            await CommentService.LikeCommentAsync(commentId, CurrentUserId);
            var comment = commentsWithUsers.FirstOrDefault(c => c.Comment.commentId == commentId);
            if (comment != null)
            {
                comment.Comment.likeCount++;
                comment.Comment.userLiked = true;
            }
            
            if(CurrentUserId != comment.Comment.userId){ 
                var currentUserDetails = await SMUserService.GetByUserId(CurrentUserId);
                var currentUserNickname = currentUserDetails.Nickname;
                NotificationDTO notification = new NotificationDTO
                {
                NotificationMessage = $"{currentUserNickname} reacted to your comment: {comment.Comment.body}!",
                UserId = comment.Comment.userId,
                Timestamp = DateTime.Now.ToString()
                };
                await NotificationService.SendNotificationAsync(notification);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error liking comment {commentId}: {ex.Message}");
        }
    }
    private async Task UnlikeComment(int commentId)
    {
        try
        {
            await CommentService.UnlikeCommentAsync(commentId, CurrentUserId);
            var comment = commentsWithUsers.FirstOrDefault(c => c.Comment.commentId == commentId);
            if (comment != null)
            {
                comment.Comment.likeCount--;
                comment.Comment.userLiked = false;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error unliking comment {commentId}: {ex.Message}");
        }
    }
    private async Task ToggleLikeComment(int commentId, bool userLiked)
    {
        if (userLiked)
        {
            await UnlikeComment(commentId);
        }
        else
        {
            await LikeComment(commentId);
        }

        await ReloadCommentsAsync();
    }

    private async Task FetchLikedComments()
    {
        try
        {
            var likedComments = await CommentService.GetAllLikedCommentsAsync(CurrentUserId);
            foreach (var comment in commentsWithUsers)
            {
                comment.Comment.userLiked = likedComments.Any(c => c.commentId == comment.Comment.commentId);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private class CommentWithUser
    {
        public Comment Comment { get; set; }
        public SMUser SmUser { get; set; }
        public bool isEditMode { get; set; }
        public string editedCommentBody { get; set; }
    }
    private void NavigateToUserProfile(string username)
    {
        NavigationManager.NavigateTo($"/Profiles/{username}");
    }
    public async Task ReloadCommentsAsync()
    {
        await LoadCommentsAndUsers();
        await FetchLikedComments();
        StateHasChanged();
    }

    private async Task DeleteComment(int commentId)
    {
        try
        {
            await CommentService.DeleteCommentAsync(commentId);
            await ReloadCommentsAsync();
            
            await OnCommentDeleted.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting comment {commentId}: {ex.Message}");
        }
    }
    private void EditComment(CommentWithUser commentWithUser)
    {
        commentWithUser.isEditMode = true;
        commentWithUser.editedCommentBody = commentWithUser.Comment.body;
    }
    private void CancelEdit(CommentWithUser commentWithUser)
    {
        commentWithUser.isEditMode = false;
        commentWithUser.editedCommentBody = null;
    }
    private async Task SaveEdit(CommentWithUser commentWithUser)
    {
        if (string.IsNullOrWhiteSpace(commentWithUser.editedCommentBody))
        {
            await OnCommentError.InvokeAsync("Comment cannot be empty.");
            return;
        }
        try
        {
            commentWithUser.Comment.body = commentWithUser.editedCommentBody;
            UpdateCommentDTO dto = new UpdateCommentDTO(commentWithUser.Comment.commentId, commentWithUser.editedCommentBody);
            await CommentService.UpdateCommentAsync(dto);
            commentWithUser.isEditMode = false;
            await OnEditSuccess.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving comment {commentWithUser.Comment.commentId}: {ex.Message}");
        }
    }
}