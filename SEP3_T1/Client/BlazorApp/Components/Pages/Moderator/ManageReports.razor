@page "/ManageReports"
@using DTOs.DTOs.Report
@using HttpClients.ClientInterfaces
@inject IReportService ReportService
@inject IPostService PostService

<h3 class="page-title">Manage Reports</h3>

<AuthorizeView Roles="Moderator">
    <Authorized>
        @if (reports == null)
        {
            <p class="loading-text">Loading...</p>
        }
        else if (!reports.Any())
        {
            <p class="no-reports-text">No reports found.</p>
        }
        else
        {
            <div class="reports-container">
                @foreach (var report in reports)
                {
                    <div class="report-card">
                        <div class="report-details">
                            <p><strong>Post ID:</strong> @report.PostId</p>
                            <p><strong>Reported By:</strong> @report.UserId</p>
                            <p><strong>Date:</strong> @FormatDate(report.Timestamp)</p>
                        </div>
                        <div class="report-actions">
                            <button class="btn-action btn-danger" @onclick="() => DeletePost(report.PostId)">Delete Post</button>
                            <button class="btn-action btn-secondary" @onclick="() => RejectReport(report.ReportId)">Dismiss</button>
                        </div>
                    </div>
                }
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p class="not-authorized-text">You are not authorized to view this page. Please log in as a moderator.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<ReportDTO> reports;

    protected override async Task OnInitializedAsync()
    {
        reports = await ReportService.GetAllReports();
    }

    private async Task DeletePost(int postId)
    {
        try
        {
            await PostService.DeletePost(postId);
            reports = await ReportService.GetAllReports();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to delete post: {ex.Message}");
        }
    }

    private async Task RejectReport(int reportId)
    {
        try
        {
            await ReportService.RejectReport(reportId);
            reports = await ReportService.GetAllReports();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to reject report: {ex.Message}");
        }
    }

    private string FormatDate(string timestamp)
    {
        if (DateTime.TryParse(timestamp, out DateTime date))
        {
            return date.ToString("yyyy/MM/dd HH:mm");
        }
        return timestamp;
    }
}
