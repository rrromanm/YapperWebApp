@page "/manage-categories"
@using System.Security.Claims
@using DTOs.Models
@using DTOs.User
@using HttpClients.ClientInterfaces
@inject ICategoryService CategoryService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavMgr

<h3>Create Category</h3>

<AuthorizeView Roles="User">
    <Authorized>
<div>
    <label for="categoryName">Category Name:</label>
    <input type="text" @bind="newCategoryName" />
    <button @onclick="CreateCategory">Create</button>
</div>

<h3>All Categories</h3>
<ul>
    @foreach (var category in categories)
    {
        <li @onclick="() => SelectCategory(category)">
            @category.Name
        </li>
    }
</ul>

@if (selectedCategory != null)
{
    <h3>Selected Category</h3>
    <div>
        <label>Id:</label> @selectedCategory.Id
    </div>
    <div>
        <label>Name:</label>
        <input type="text" @bind="selectedCategory.Name" />
    </div>
    <div>
        <label>Added By:</label> @selectedCategory.AddedBy
    </div>
    <button @onclick="UpdateSelectedCategory">Save</button>
    <button @onclick="DeleteSelectedCategory">Delete</button>
}
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in.</p>
        <button @onclick='() => NavMgr.NavigateTo("login")'>Login</button>
        <button @onclick='() => NavMgr.NavigateTo("register")'>Register</button>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string newCategoryName;
    private List<Category> categories = new List<Category>();
    private Category selectedCategory;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        categories = await CategoryService.GetAllCategories();
    }

    private async Task CreateCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategoryName))
        {
            AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            ClaimsPrincipal user = authState.User;
            Claim userIdClaim = user.FindFirst("Id");
            if (userIdClaim != null)
            {
                int userId = int.Parse(userIdClaim.Value);
                CreateCategoryDTO newCategory = new CreateCategoryDTO
                {
                    Name = newCategoryName,
                    addedBy = userId
                };
                await CategoryService.CreateCategory(newCategory);
                newCategoryName = string.Empty;
                await LoadCategories();
            }
        }
    }

    private void SelectCategory(Category category)
    {
        selectedCategory = category;
    }

    private async Task UpdateSelectedCategory()
    {
        if (selectedCategory != null)
        {
            var updateCategoryDto = new UpdateCategoryDTO
            {
                id = selectedCategory.Id,
                name = selectedCategory.Name
            };
            await CategoryService.UpdateCategory(updateCategoryDto);
            await LoadCategories();
        }
    }

    private async Task DeleteSelectedCategory()
    {
        if (selectedCategory != null)
        {
            await CategoryService.DeleteCategory(selectedCategory.Id);
            selectedCategory = null;
            await LoadCategories();
        }
    }
}