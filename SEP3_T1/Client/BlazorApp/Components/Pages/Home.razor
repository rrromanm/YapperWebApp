@page "/"
@using DTOs.Models
@using DTOs.User.PostDTOs
@using HttpClients.ClientInterfaces
@using BlazorApp.Components.Components
@using DTOs.User
@inject NavigationManager NavMgr
@inject AuthenticationStateProvider AuthProvider
@inject IPostService PostService
@inject ISMUserService UserService
@inject ICategoryService CategoryService

<PageTitle>Home</PageTitle>

<h1>Home page</h1>

<link href="HomeStylesheet.css" rel="stylesheet"/>

<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Identity.Name!</p>
        <p>You are logged in.</p>

        <div class="home-container">
            <div class="posts-container">
                <div class="post-div">
                    <div>
                        <label>Title:</label>
                        <InputText @bind-Value="title" />
                    </div>
                    <div>
                        <label>Body:</label>
                        <InputTextArea @bind-Value="body" />
                    </div>
                    <div class="category-submit">
                        <div>
                            <label>Category:</label>
                            <InputSelect @bind-Value="categoryId">
                                <option value="0">Pick a category</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="submit-error-container">
                            <button type="submit" @onclick="HandleValidSubmit" class="btn btn-sm submit-button">Submit</button>
                            <div class="error-message">@errorMessage</div>
                        </div>
                    </div>
                </div>

                <div class="profile-posts">
                    <div class="post-buttons">
                        <button @onclick="ShowAllPosts" class="post-btn @(showAllPosts ? "active" : "grey")">For you</button>
                        <button @onclick="ShowFollowingPosts" class="post-btn @(showFollowingPosts ? "active" : "grey")">Following</button>
                    </div>

                    @if (showAllPosts)
                    {
                        <div class="posts">
                            @if (allPosts != null && allPosts.Count > 0)
                            {
                                @foreach (var post in allPosts)
                                {
                                    <PostComponent Post="post" />
                                }
                            }
                            else
                            {
                                <p>No posts available.</p>
                            }
                        </div>
                    }
                    else if (showFollowingPosts)
                    {
                        <div class="posts">
                            @if (followingPosts != null && followingPosts.Count > 0)
                            {
                                @foreach (var post in followingPosts)
                                {
                                    <PostComponent Post="post" />
                                }
                            }
                            else
                            {
                                <p>No posts available.</p>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="accounts-container">
                <div class="account-box">
                    <h4>Recommended accounts</h4>
                    @foreach (var user in threeRandomUsers)
                    {
                        <div class="account">
                            <div>
                                <div class="account-nickname" @onclick="() => NavigateToUserProfile(user.username)">@user.username</div>
                            </div>
                            <button class="btn btn-sm btn-outline-primary submit-button"
                                    @onclick="() => ToggleFollow(user.id)">
                                @(user.IsFollowedByCurrentUser ? "Unfollow" : "Follow")
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in.</p>
        <button @onclick='() => NavMgr.NavigateTo("login")'>Login</button>
        <button @onclick='() => NavMgr.NavigateTo("register")'>Register</button>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string title;
    private string body;
    private int categoryId;
    private int userId;

    private List<Category> categories = new List<Category>();
    private List<Post> allPosts = new List<Post>();
    private List<Post> followingPosts = new List<Post>();
    private List<FollowersDTO> threeRandomUsers = new List<FollowersDTO>();

    private bool showAllPosts = true;
    private bool showFollowingPosts = false;

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(c => c.Type == "Id")?.Value;
            if (int.TryParse(userIdClaim, out int id))
            {
                userId = id;
            }
        }

        await GetCategories();
        await GetAllPosts();
        await GetFollowingPosts();
        await GetThreeRandomUsers();
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = null;

        if (string.IsNullOrWhiteSpace(title))
        {
            errorMessage = "Title cannot be empty.";
            return;
        }

        if (string.IsNullOrWhiteSpace(body))
        {
            errorMessage = "Body cannot be empty.";
            return;
        }

        if (categoryId == 0)
        {
            errorMessage = "Category cannot be empty.";
            return;
        }

        var createPostDto = new CreatePostDTO(title, body, categoryId, userId);

        try
        {
            await PostService.CreatePost(createPostDto);

            title = string.Empty;
            body = string.Empty;
            categoryId = 0;

            StateHasChanged();
            await GetAllPosts();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to create post. " + ex.Message;
        }
    }

    private async Task GetAllPosts()
    {
        allPosts = await PostService.GetAllPosts();
    }

    private async Task GetFollowingPosts()
    {
        followingPosts = await PostService.GetFollowingPosts(userId);
    }

    private async Task GetCategories()
    {
        categories = await CategoryService.GetAllCategories();
    }

    private void ShowAllPosts()
    {
        showAllPosts = true;
        showFollowingPosts = false;
    }

    private void ShowFollowingPosts()
    {
        showAllPosts = false;
        showFollowingPosts = true;
    }

    private void NavigateToUserProfile(string username)
    {
        NavMgr.NavigateTo($"/Profiles/{username}");
    }

    private async Task GetThreeRandomUsers()
    {
        threeRandomUsers = await UserService.GetThreeRandomUsers();
    
        foreach (var user in threeRandomUsers)
        {
            user.IsFollowedByCurrentUser = await UserService.IsFollowing(userId, user.id);
        }
    }

    private async Task ToggleFollow(int followedUserId)
    {
        var user = threeRandomUsers.FirstOrDefault(u => u.id == followedUserId);
        if (user != null)
        {
            if (user.IsFollowedByCurrentUser)
            {
                await UserService.UnfollowUser(userId, followedUserId);
                user.IsFollowedByCurrentUser = false;
                
                await GetFollowingPosts();
            }
            else
            {
                await UserService.FollowUser(userId, followedUserId);
                user.IsFollowedByCurrentUser = true;
                
                await GetFollowingPosts();
            }
        }
    }
}