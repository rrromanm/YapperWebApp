@page "/profiles/{username}"
@using BlazorApp.Components.Components
@using DTOs.Models
@using DTOs.User
@using HttpClients.ClientInterfaces
@inject ISMUserService userService
@inject IPostService postService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavMgr

<AuthorizeView>
    <Authorized>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p>@errorMessage</p>
        }
        else
        {
            <div class="profile-page">
                <div class="profile-container">
                    <div class="profile-header">
                        <img src="yapper-profile-pic.jpg" class="profile-pic" alt="Placeholder Image"/>
                        <div class="profile-details">
                            <div class="nickname-follow">
                                <h2>@nickname</h2>
                                <div class="button-container">
                                    @if (isCurrentUser)
                                    {
                                        <button @onclick='() => NavMgr.NavigateTo("EditProfile")' class="edit-btn">Edit</button>
                                    }
                                    else
                                    {
                                        <FollowBtn userId="userId" OnFollowStatusChanged="UpdateFollowerCount" />
                                    }
                                </div>
                            </div>

                            <p>@($"@{username}")</p>
                            <p>
                                Followers:
                                <button @onclick="OpenFollowersModal" class="link-button">@followersCount</button>
                            </p>

                            <p>
                                Following:
                                <button @onclick="OpenFollowingModal" class="link-button">@followingCount</button>
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="profile-posts">
                <div class="post-buttons">
                    <button @onclick="ShowPosts" class="post-btn @(showPosts ? "active" : "grey")">Posts</button>
                    <button @onclick="ShowLikedPosts" class="post-btn @(showLikedPosts ? "active" : "grey")">Liked Posts</button>
                </div>
                @if (showPosts)
                {
                    <div class="posts">
                        @if (posts != null && posts.Count > 0)
                        {
                            @foreach (var post in posts)
                            {
                                <PostComponent Post="post" />
                            }
                        }
                        else
                        {
                            <p>No posts available.</p>
                        }
                    </div>
                }
                else if (showLikedPosts)
                {
                    <div class="liked-posts">
                        @if (likedPosts != null && likedPosts.Count > 0)
                        {
                            @foreach (var post in likedPosts)
                            {
                                <PostComponent Post="post" />
                            }
                        }
                        else
                        {
                            <p>No liked posts available.</p>
                        }
                    </div>
                }
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this profile.</p>
    </NotAuthorized>
</AuthorizeView>

@if (isFollowersModalOpen)
{
    <div class="modal-overlay" @onclick="CloseFollowersModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <h3>Followers</h3>
            <ul class="scrollable-list">
                @if (followersList != null && followersList.Count > 0)
                {
                    @foreach (var follower in followersList)
                    {
                        <li>
                            <img src="https://via.placeholder.com/25" alt="Profile Picture" class="profile-picture" />
                            <div class="user-info">
                                <span class="nickname username-link" @onclick="() => NavigateToUserProfile(follower.username)">@follower.nickname</span>
                                <span class="username">@follower.username</span>
                            </div>
                            @if (currentUserId == follower.id)
                            {

                            }
                            else
                            {
                                <FollowBtn userId="follower.id" OnFollowStatusChanged="UpdateFollowerCount"/>
                            }
                        </li>
                    }
                }
                else
                {
                    <p>No followers found.</p>
                }
            </ul>
            <button @onclick="CloseFollowersModal">Close</button>
        </div>
    </div>
}

@if (isFollowingModalOpen)
{
    <div class="modal-overlay" @onclick="CloseFollowingModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <h3>Following</h3>
            <ul class="scrollable-list">
                @if (followingList != null && followingList.Count > 0)
                {
                    @foreach (var following in followingList)
                    {
                        <li>
                            <img src="https://via.placeholder.com/25" alt="Profile Picture" class="profile-picture" />
                            <div class="user-info">
                                <span class="nickname username-link" @onclick="() => NavigateToUserProfile(following.username)">@following.nickname</span>
                                <span class="username">@following.username</span>
                            </div>
                            <FollowBtn userId="following.id" OnFollowStatusChanged="UpdateFollowerCount"/>
                        </li>
                    }
                }
                else
                {
                    <p>No following found.</p>
                }
            </ul>
            <button @onclick="CloseFollowingModal">Close</button>
        </div>
    </div>
}

@code {
    [Parameter] public string username { get; set; }
    private int userId { get; set; }
    private string nickname;
    private int followersCount;
    private int followingCount;

    private string? errorMessage;
    private bool isCurrentUser;
    private int currentUserId;

    private List<Post> posts = new List<Post>();
    private List<Post> likedPosts = new List<Post>();
    private List<FollowersDTO> followersList = new List<FollowersDTO>();
    private List<FollowersDTO> followingList = new List<FollowersDTO>();

    private bool showPosts = true;
    private bool showLikedPosts = false;
    private bool isFollowersModalOpen = false;
    private bool isFollowingModalOpen = false;

    protected override async Task OnParametersSetAsync()
    {
        errorMessage = null; // Clear previous error messages

        try
        {
            var user = await userService.GetByUsername(username);
            if (user != null)
            {
                nickname = user.Nickname;
                userId = user.Id;
                followersCount = user.followersCount;
                followingCount = user.followingCount;
                var authState = await AuthProvider.GetAuthenticationStateAsync();
                var currentUser = authState.User.Identity.Name;
                var userIdClaim = authState.User.FindFirst(claim => claim.Type == "Id");
                currentUserId = userIdClaim != null ? int.Parse(userIdClaim.Value) : 0;
                isCurrentUser = currentUser == username;

                if (showPosts)
                {
                    await loadPosts(user.Id);
                    await LoadLikedPosts(user.Id);
                }
            }
            else
            {
                errorMessage = $"Account with username '{username}' doesn't exist.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Account with username '{username}' doesn't exist.";
        }
    }

    private async Task loadPosts(int userId)
    {
        try
        {
            posts = await postService.GetPostsByUserId(userId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load posts.";
            Console.WriteLine(ex);
        }
    }
    
    private async Task LoadLikedPosts(int userId)
    {
        try
        {
            likedPosts = await postService.GetLikedPosts(userId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load liked posts.";
            Console.WriteLine(ex);
        }
    }

    private async Task OpenFollowersModal()
    {
        try
        {
            isFollowersModalOpen = true;
            followersList = await userService.GetFollowers(userId);
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load followers.";
            Console.WriteLine(ex);
        }
    }

    private void CloseFollowersModal()
    {
        isFollowersModalOpen = false;
    }

    private async Task OpenFollowingModal()
    {
        try
        {
            isFollowingModalOpen = true;
            followingList = await userService.GetFollowing(userId);
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load following.";
            Console.WriteLine(ex);
        }
    }

    private void CloseFollowingModal()
    {
        isFollowingModalOpen = false;
    }

    private async void ShowPosts()
    {
        showPosts = true;
        showLikedPosts = false;
        var user = await userService.GetByUsername(username);
        if (user != null)
        {
            await loadPosts(user.Id);
        }
    }

    private void ShowLikedPosts()
    {
        showPosts = false;
        showLikedPosts = true;
    }

    private async Task UpdateFollowerCount()
    {
        try
        {
            var user = await userService.GetByUsername(username);
            if (user != null)
            {
                followersCount = user.followersCount;
                followingCount = user.followingCount;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to update follower count.";
            Console.WriteLine(ex);
        }
    }
    private void NavigateToUserProfile(string username)
    {
        CloseFollowersModal();
        CloseFollowingModal();
        NavMgr.NavigateTo($"/profiles/{username}");
    }
}