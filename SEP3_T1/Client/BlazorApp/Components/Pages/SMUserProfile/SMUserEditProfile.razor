@page "/EditProfile"
@using DTOs.User
@using HttpClients.ClientInterfaces
@inject NavigationManager NavMgr
@inject AuthenticationStateProvider AuthProvider
@inject ISMUserService IsmUserService

@attribute [Authorize]

<div class="edit-profile-page">
    <button @onclick="NavigateBack" class="back-btn">Back</button>
    <h2>Edit Profile</h2>
    <div class="edit-profile-container">
        <div class="left-column">
            <label for="nickname">Nickname:</label>
            <input type="text" id="nickname" placeholder="@nickname" @bind="newNickname" />
            <label for="email">Email:</label>
            <input type="email" id="email" placeholder="@email" @bind="newEmail" />
        </div>
        <div class="right-column">
            <label for="oldPassword">Current Password:</label>
            <div class="password-container">
                <input type="password" id="oldPassword" @bind="oldPassword" class="password-input"/>
            </div>

            <label for="newPassword">New Password:</label>
            <div class="password-container">
                <input type="password" id="newPassword" @bind="newPassword" class="password-input"/>
            </div>

            <label for="repeatPassword">Repeat Password:</label>
            <div class="password-container">
                <input type="password" id="repeatPassword" @bind="repeatPassword" class="password-input"/>
            </div>
        </div>
    </div>
    <button @onclick="SaveProfile" class="save-btn">Save</button>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@errorMessage</div>
    }
</div>

@code {
    private int userId;
    private string username;
    private string nickname;
    private string email;

    private string newNickname;
    private string newEmail;

    private string oldPassword;
    private string newPassword;
    private string repeatPassword;
    private string currentPassword;

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(c => c.Type == "Id")?.Value;
            if (int.TryParse(userIdClaim, out int userId))
            {
                await LoadUserProfile(userId);
            }
        }
    }

    private async Task LoadUserProfile(int userId)
    {
        try
        {
            var user = await IsmUserService.GetByUserId(userId);
            if (user != null)
            {
                this.userId = user.Id;
                nickname = user.Nickname;
                email = user.Email;
                username = user.Username;
                currentPassword = user.Password;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load user profile.";
        }
    }

    private void NavigateBack()
    {
        NavMgr.NavigateTo($"/profiles/{username}");
    }

    private async Task SaveProfile()
    {
        errorMessage = null; // Clear previous error messages

        // Validate the current password
        if (oldPassword != currentPassword)
        {
            errorMessage = "Incorrect current password.";
            return;
        }

        // Validate new password and confirmation
        if (!string.IsNullOrEmpty(newPassword))
        {
            if (newPassword != repeatPassword)
            {
                errorMessage = "New passwords do not match.";
                return;
            }

            if (!IsStrongPassword(newPassword))
            {
                errorMessage = "Password must be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, one digit, and one special character.";
                return;
            }
        }

        // Validate nickname and email length
        if (!string.IsNullOrEmpty(newNickname) && newNickname.Length > 100)
        {
            errorMessage = "Nickname cannot exceed 100 characters.";
            return;
        }

        if (!string.IsNullOrEmpty(newEmail))
        {
            if (newEmail.Length > 100)
            {
                errorMessage = "Email cannot exceed 100 characters.";
                return;
            }

            if (!IsValidEmail(newEmail))
            {
                errorMessage = "Email format is invalid.";
                return;
            }
        }

        // Prepare DTO for update
        var updateUserDto = new UpdateUserDTO
        {
            UserId = userId,
            Email = email != newEmail && !string.IsNullOrWhiteSpace(newEmail) ? newEmail : "",
            Password = !string.IsNullOrEmpty(newPassword) ? newPassword : "",
            Nickname = nickname != newNickname && !string.IsNullOrWhiteSpace(newNickname) ? newNickname : ""
        };

        try
        {
            // Call the user service to update the profile
            await IsmUserService.UpdateSMUser(updateUserDto);
            Console.WriteLine("Profile updated successfully");

            await LoadUserProfile(userId);
            NavMgr.NavigateTo($"/profiles/{username}");
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to update profile. " + ex.Message;
        }
    }

    private bool IsStrongPassword(string password)
    {
        if (password.Length < 8)
            return false;
        if (!password.Any(char.IsUpper))
            return false;
        if (!password.Any(char.IsLower))
            return false;
        if (!password.Any(char.IsDigit))
            return false;
        if (!password.Any(ch => !char.IsLetterOrDigit(ch)))
            return false;

        return true;
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email && email.Contains(".");
        }
        catch
        {
            return false;
        }
    }
}