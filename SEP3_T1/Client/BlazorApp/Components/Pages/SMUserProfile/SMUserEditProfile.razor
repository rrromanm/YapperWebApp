@page "/EditProfile"
@using BlazorApp.Auth
@using DTOs.User
@using DTOs.Util
@using HttpClients.ClientInterfaces
@inject NavigationManager NavMgr
@inject AuthenticationStateProvider AuthProvider
@inject ISMUserService IsmUserService

<AuthorizeView Roles="User">
    <Authorized>
    <div class="edit-profile-page">
        <button @onclick="NavigateBack" class="back-btn">Back</button>
        <h2>Edit Profile</h2>
        <div class="edit-profile-container">
            <div class="left-column">
                <label for="nickname">Nickname:</label>
                <input type="text" id="nickname" placeholder="@nickname" @bind="newNickname" />
                <label for="email">Email:</label>
                <input type="email" id="email" placeholder="@email" @bind="newEmail" />
            </div>
            <div class="right-column">
                <label for="oldPassword">Current Password:</label>
                <input type="password" id="oldPassword" @bind="oldPassword" class="password-input" />

                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" @bind="newPassword" class="password-input" />

                <label for="repeatPassword">Repeat Password:</label>
                <input type="password" id="repeatPassword" @bind="repeatPassword" class="password-input" />
            </div>
        </div>
        <button @onclick="SaveProfile" class="save-btn">Save</button>
        <button @onclick="ConfirmDeleteAccount" class="delete-account-btn">Delete Account</button>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@errorMessage</div>
        }

        @if (showDeleteConfirmation)
        {
            <div class="overlay"></div>
            <div class="confirmation-popup">
                <h3>Are you sure you want to delete your account?</h3>
                <p>All information will be permanently deleted and cannot be recovered.</p>
                <label for="deletePassword">Enter Current Password:</label>
                <input type="password" id="deletePassword" @bind="deletePassword" class="password-input" />
                <div class="confirmation-buttons">
                    <button @onclick="DeleteAccount" class="confirm-delete-btn">Yes, Delete</button>
                    <button @onclick="CancelDelete" class="cancel-delete-btn">Cancel</button>
                </div>
            </div>
        }
    </div>
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in.</p>
        <button @onclick='() => NavMgr.NavigateTo("login")'>Login</button>
        <button @onclick='() => NavMgr.NavigateTo("register")'>Register</button>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int userId;
    private string username;
    private string nickname;
    private string email;
    private string newNickname;
    private string newEmail;
    private string oldPassword;
    private string newPassword;
    private string repeatPassword;
    private string currentPassword;
    private string errorMessage;
    private bool showDeleteConfirmation = false;
    private string deletePassword;

    protected override async Task OnInitializedAsync()
    {
        errorMessage = null;

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(c => c.Type == "Id")?.Value;
            if (int.TryParse(userIdClaim, out int userId))
            {
                await LoadUserProfile(userId);
            }
        }
    }

    private async Task LoadUserProfile(int userId)
    {
        try
        {
            var user = await IsmUserService.GetByUserId(userId);
            if (user != null)
            {
                this.userId = user.Id;
                nickname = user.Nickname;
                email = user.Email;
                username = user.Username;
                currentPassword = user.Password;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load user profile.";
        }
    }

    private void NavigateBack()
    {
        NavMgr.NavigateTo($"/profiles/{username}");
    }

    private async Task SaveProfile()
    {
        errorMessage = null;
        PasswordManager passwordManager = new PasswordManager();

        if (passwordManager.HashPassword(oldPassword) != currentPassword)
        {
            errorMessage = "Incorrect current password.";
            return;
        }

        if (!string.IsNullOrEmpty(newPassword) && (newPassword != repeatPassword || !IsStrongPassword(newPassword)))
        {
            errorMessage = "New passwords do not match or are not strong enough.";
            return;
        }

        if (!string.IsNullOrEmpty(newNickname) && newNickname.Length > 100)
        {
            errorMessage = "Nickname cannot exceed 100 characters.";
            return;
        }

        if (!string.IsNullOrEmpty(newEmail) && (!IsValidEmail(newEmail) || newEmail.Length > 100))
        {
            errorMessage = "Invalid email format or length.";
            return;
        }
        
        
        var updateUserDto = new UpdateUserDTO
        {
            UserId = userId,
            Email = email != newEmail && !string.IsNullOrWhiteSpace(newEmail) ? newEmail : "",
            Password = !string.IsNullOrEmpty(newPassword) ? passwordManager.HashPassword(newPassword) : "",
            Nickname = nickname != newNickname && !string.IsNullOrWhiteSpace(newNickname) ? newNickname : ""
        };

        try
        {
            await IsmUserService.UpdateSMUser(updateUserDto);
            await LoadUserProfile(userId);
            NavMgr.NavigateTo($"/profiles/{username}");
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to update profile. " + ex.Message;
        }
    }

    private void ConfirmDeleteAccount()
    {
        showDeleteConfirmation = true;
        errorMessage = null;
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        deletePassword = string.Empty;
        errorMessage = null;
    }

    private async Task DeleteAccount()
    {
        PasswordManager passwordManager = new PasswordManager();
        if (passwordManager.HashPassword(deletePassword) != currentPassword)
        {
            errorMessage = "Incorrect password. Account deletion aborted.";
            return;
        }

        try
        {
            await IsmUserService.DeleteSMUser(userId);
            await ((SimpleAuthProvider)AuthProvider).Logout();
            NavMgr.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to delete account. " + ex.Message;
        }
    }

    private bool IsStrongPassword(string password) => password.Length >= 8
        && password.Any(char.IsUpper)
        && password.Any(char.IsLower)
        && password.Any(char.IsDigit)
        && password.Any(ch => !char.IsLetterOrDigit(ch));

    private bool IsValidEmail(string email) => new System.Net.Mail.MailAddress(email) is { } addr && addr.Address == email;
}
